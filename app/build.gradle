apply plugin: 'com.android.application'

android {
    def versionMajor = 0
    def versionMinor = 4
    def versionPatch = 1
    def versionBuild = 0

    buildToolsVersion "20"
    compileSdkVersion 20

    def Properties localProps = new Properties()
    localProps.load(new FileInputStream(file('../local.properties')))
    def Properties keyProps = new Properties()

    signingConfigs {
        mars3142 {
            if (localProps['keystore.props.file']) {
                keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 20
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix ".debug"
            if (localProps['keystore.props.file']) {
                signingConfig signingConfigs.mars3142
            }
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (localProps['keystore.props.file']) {
                signingConfig signingConfigs.mars3142
            }
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:20+'

    /* card library */
    compile 'com.github.gabrielemariotti.cards:library:+'
//    compile 'com.github.gabrielemariotti.cards:library-extra:+'
}

android.applicationVariants.all { variant ->

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Toaster for Android (Version $android.defaultConfig.versionName, VersionCode $android.defaultConfig.versionCode)"
        destinationDir = new File("${project.getProjectDir()}/doc/${android.defaultConfig.versionName}/", variant.baseName)
        source = variant.javaCompile.source

        def localProperties = new File(project.rootDir, "local.properties")
        if (localProperties.exists()) {
            Properties properties = new Properties()
            localProperties.withInputStream { instr ->
                properties.load(instr)
            }
            def sdkDirProp = properties.getProperty('sdk.dir')

            if (sdkDirProp != null) {
                ext.androidJar = "${sdkDirProp}/platforms/${android.compileSdkVersion}/android.jar"
                classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

                description "Generates Javadoc for $variant.name."

                options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
                options.links("http://docs.oracle.com/javase/7/docs/api/");
                options.links("http://developer.android.com/reference/reference/");
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
        }
    }
}
